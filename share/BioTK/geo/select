#!/usr/bin/env python3

import argparse
import os
import tempfile
from subprocess import Popen
import sys

import BioTK.db

p = argparse.ArgumentParser()
p.add_argument("taxon_id", type=int)
p.add_argument("--gender", "-g", choices=["M","F"])
p.add_argument("--tissue", "-t")
p.add_argument("--type", "-y", choices=["RNA", "genomic"],
        default="RNA")
p.add_argument("--raw", "-r", action="store_true")

args = p.parse_args()


path = "%s/ncbi/geo/matrix/taxon/%s/%s" % (
    os.environ["BTK_DATA"],
    args.taxon_id,
    "raw" if args.raw else "normalized")

if not os.path.exists(path):
    raise Exception("Path does not exist: %s" % path)


db = BioTK.db.connect()
c = db.cursor()

# Type & taxon
c.execute("""
SELECT ch.accession 
FROM channel ch
INNER JOIN sample s
ON s.id=ch.sample_id
INNER JOIN taxon t
ON ch.taxon_id=t.id
WHERE t.accession=%s
AND s.type=%s
""", (str(args.taxon_id),args.type))
accessions = set([x[0] for x in c])

# Tissue
if args.tissue:
    c.execute("""
    SELECT channel_accession
    FROM tissue_channel(%s)
    WHERE taxon_accession=%s
    """, (args.tissue, str(args.taxon_id)))
    accessions = set([x[0] for x in c]) & accessions

if args.gender:
    raise NotImplementedError

accessions = [a[:-2] for a in accessions]
with tempfile.NamedTemporaryFile("w") as h:
    for a in accessions:
        h.write("%s\n" % a)
    h.flush()
    cmd = ["mmat", "select", "-m", path, "-c", h.name]
    p = Popen(cmd, stdout=sys.stdout)
    p.wait()
