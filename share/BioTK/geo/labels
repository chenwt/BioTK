#!/usr/bin/env python3

import sys
import re

import btk
import BioTK.db
from BioTK.text import Trie

def group_if_match(pattern, group, text):
    m = re.search(pattern, text)
    if m:
        return m.group(group)

PATTERNS = {
    "age": "[^\w]age\ *(\((?P<age_unit1>[a-z]*)\))?:\
\ *(?P<age>\d+(\.[0-9]+)?)(( *\- *| (to|or) )\
(?P<age_end>\d+[\.\d]*))?(\ *(?P<age_unit2>[a-z]+))?",
    "age_unit": "(age\s*unit[s]*|unit[s]* of age): (?P<age_unit>[a-z])",
    # Tissue (TODO: map to BTO)
    "tissue": "(cell type|tissue|organ) *: *(?P<tissue>[A-Za-z0-9\+\- ]+)",
    # Disease states (TODO: map to DO)
    "cancer": "(tumor|tumour|cancer|sarcoma|glioma|leukem|mesothelioma|metastasis|carcinoma|lymphoma|blastoma|nsclc|cll|ptcl)",
    "infection": "infec",
    "gender": "(gender|sex):\ *(?P<gender>[mf])"
}
PATTERNS = dict((k, re.compile(v)) for k,v in PATTERNS.items())

# A common additional unit is "dpc", which refers to embryos. 
# Currently ignored.
# Some samples are labeled with something like "11 and 14 weeks". 
# I have no idea what this means, so it's ignored. 
TIME_CONVERSION = {
        "year": 12,
        "y": 12,
        "yr": 12,
        "month": 1,
        "moth": 1, # yes...
        "mo": 1,
        "m": 1,
        "week": 1 / 4.5,
        "wek": 1 / 4.5, # ...
        "wk": 1 / 4.5,
        "w": 1 / 4.5,
        "day": 1 / 30,
        "d": 1 / 30,
        "hour": 1 / (24 * 30),
        "hr": 1 / (24 * 30),
        "h": 1 / (24 * 30)
}

def extract_age(text):
    m = re.search(PATTERNS["age"], text)
    if m is None:
        return
    age = float(m.group("age"))
    age_end = m.group("age_end")
    if age_end:
        age = (age + float(age_end)) / 2
    unit = group_if_match(PATTERNS["age_unit"], 
            "age_unit", text) \
            or m.group("age_unit2") \
            or m.group("age_unit1")
    if not unit:
        return
    unit = unit.rstrip("s")
    if not unit in TIME_CONVERSION:
        return
    conversion_factor = TIME_CONVERSION[unit]
    return age * conversion_factor

trie = Trie(case_sensitive=False)
db = BioTK.db.connect()
c = db.cursor()
c.execute("""
SELECT t.accession,s.value
FROM synonym s
INNER JOIN entity_synonym es
ON es.synonym_id=s.id
INNER JOIN term t
ON t.id=es.entity_id
INNER JOIN ontology o
ON o.id=t.ontology_id
WHERE o.accession='BTO'
UNION
SELECT t.accession,t.name
FROM term t
INNER JOIN ontology o
ON o.id=t.ontology_id
WHERE o.accession='BTO'
""")
for id,synonym in set(c):
    trie.add(synonym, id)
trie.build()

def extract_tissue(text):
    matches = trie.search(text)
    if not matches:
        return
    matches.sort(key=lambda x: len(x))
    return matches[-1].key

def extract_gender(text):
    m = re.search(PATTERNS["gender"], text)
    if m is not None:
        return m.group("gender").upper()

print("ID", "Tissue", "Age", "Gender", sep="\t")
for line in sys.stdin:
    accession, *text = line.strip("\n").split("\t")
    text = " ".join(text).lower()
    age = extract_age(text) or ""
    tissue = extract_tissue(text) or "" 
    gender = extract_gender(text) or ""
    if any([tissue,age,gender]):
        print(accession, tissue, age, gender, sep="\t")
