#!/usr/bin/env python3

import argparse
import operator as op
import sys

import numpy as np
import pandas as pd
import patsy
import statsmodels.api as sm

import BioTK

p = argparse.ArgumentParser()
p.add_argument("covariates", type=argparse.FileType("r"), 
        help="Tabular file containing covariate values with samples as rows")
p.add_argument("formula", 
        help="RHS of regression formula. Example: 'age+gender'")
p.add_argument("--round", "-r", type=int, default=3,
        help="Round results to this decimal place")
p.add_argument("--logarithm-base", "-b", type=float, default=10,
        help="The log base to be used for log output formats")
p.add_argument("--standardize", "-s", action="store_true",
        help="Standardize the exog data before regression (affects coefficient magnitudes)")
p.add_argument("--output-format", "-o", 
        choices=[
            "p", # Straight p-value
            "lp", # log p-value
            "slp", # "signed" log p-value (the sign of the coef)
            "coef" # the model coefficient
        ],
        default="coef")

# TODO: move to separate script?
p.add_argument("--filter", "-f", action="append", default=[])

#p.add_argument("--group-by", "-g")
args = p.parse_args()
assert args.round >= 1

operators = {
    ">": op.gt, "<": op.lt, "==": op.eq, "<=": op.le, ">=": op.ge
}

# Filters
filters = []
for text in args.filter:
    for op,fn in sorted(operators.items(), key=lambda _: -len(_[0])):
        if op in text:
            key,value = text.split(op)
            try:
                value = float(value.strip())
            except ValueError:
                value = value.strip()
            filters.append((key.strip(), fn, value))
            break
    else:
        raise ValueError("Filter not in format: Column[operator]Value. Valid operators: >,<,==,<=,>=")

C = pd.read_table(args.covariates, index_col=0)
for k,fn,v in filters:
    ix = fn(C[k],v)
    C = C.ix[ix,:]

if C.shape[0] == 0:
    raise Exception("No covariates left after filtering: (", C.shape[0], "left)")

C["age"] = C["age"] / 12 / 10 #[1 if _ else 0 for _ in C["age"] > C["age"].mean()]
ix = (C["age"] >= 3) & (C["age"] <= 9)
C = C.ix[ix,:]
C = patsy.dmatrix(args.formula, 
        data=C, return_type="dataframe").dropna(how="any")

# TODO: Group by? 

def log(x):
    return np.log(x) / np.log(args.logarithm_base)

header_printed = False
for i,row in enumerate(BioTK.io.read_matrix(sys.stdin)):
    if i == 0:
        if not row.index.isin(C.index).any():
            sys.stderr.write("No labels for this dataset! Aborting.\n")
            sys.exit(1)

    c,row = C.align(row.dropna(), join="inner", axis=0)
    n = len(row)

    if n < 3:
        continue

    if args.standardize:
        row = (row - row.mean()) / row.std()

    fit = sm.OLS(row, c).fit()

    if args.output_format == "coef":
        o = fit.params
    elif args.output_format == "p":
        o = fit.pvalues
    elif args.output_format == "lp":
        o = fit.pvalues.apply(log)
    elif args.output_format == "slp":
        o = fit.pvalues.apply(log) * np.sign(fit.params)
    else:
        raise

    if not header_printed:
        print("", "N", *o.index, sep="\t")
        header_printed = True
    print(row.name, n, *[round(_,args.round) for _ in o], sep="\t")
    sys.stdout.flush()
