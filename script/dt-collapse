#!/usr/bin/env python3

import argparse
from collections import Counter
import sys
from collections import defaultdict

import numpy as np

from BioTK.io import read_matrix, read_factor

p = argparse.ArgumentParser()
p.add_argument("--min-count", "-m", type=int, default=0,
    help="Filter values in the factor which occur less than <min-count> times.")
p.add_argument("factors", type=argparse.FileType("r"))
args = p.parse_args()
assert args.min_count >= 0

with args.factors as h:
    factors = defaultdict(set)
    for line in h:
        s,g = line.rstrip("\n").split("\t")
        factors[g].add(s)

factors = dict(((k,v) for k,v in factors.items() \
        if len(v) >= args.min_count))

for i,row in enumerate(read_matrix(sys.stdin)):
    if i and i % 100 == 0:
        print(i, file=sys.stderr)
    if i == 0:
        available = set(row.index)
        ok = set()
        for k,vs in factors.items():
            vs &= available
            if len(vs) > args.min_count:
                factors[k] = vs
                ok.add(k)
        factors = dict((k,vs) for k,vs in factors.items() if k in ok) 
        ix = list(sorted(factors.keys()))
        print("", *ix, sep="\t")
        collapsed = np.empty(len(ix))
    collapsed[:] = np.nan
    for j,k in enumerate(ix):
        collapsed[j] = row[factors[k]].mean() 
    print(row.name, *np.round(collapsed,3), sep="\t")

# Need to integrate or replace the below, collapsing by max mean:

"""
if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("mapping", type=argparse.FileType("r"))
    args = p.parse_args()

    mapping = {}
    for line in args.mapping:
        fields = line.strip("\n").split("\t")
        if len(fields) == 2:
            mapping[fields[0]] = fields[1]

    ix = None
    for i,X in enumerate(pd.read_table(sys.stdin, 
            chunksize=100,
            sep="\t", header=0, index_col=0)):
        X.index = list(map(str, X.index))
        X.columns = list(map(str, X.columns))
        Xg = X.groupby(mapping, axis=1).apply(max_mean)

        if ix is not None:
            assert (Xg.columns == ix).all()
        ix = Xg.columns

        Xg.to_csv(sys.stdout, 
                sep="\t", header=(i==0),
                float_format="%0.3f")
"""

# Python is very slow for this, a bash WIP:

"""
factors=$(mktemp)
zcat -f $1 | sort -k2b,2 > $factors

IFS=""
read -r header

while read line; do
    key=$(echo "$line" | cut -f1)
    echo "$line" \
        | tr '\t' '\n' -m \
        | sed 1d \
        | 
done
"""


