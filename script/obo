#!/usr/bin/env python3

import argparse
import sys

import click
import networkx as nx

from BioTK.ontology import parse

@click.group()
def cli():
    pass

@cli.command()
def terms():
    """
    Print term ID,name,depth,namespace tuples for an ontology.
    """
    ontology = parse(sys.stdin, format="obo")
    ontology.terms.to_csv(sys.stdout, sep="\t")

@cli.command()
def synonyms():
    """
    Print term ID,synonym pairs for an ontology.
    """
    ontology = parse(sys.stdin, format="obo")
    ontology.synonyms.to_csv(sys.stdout, sep="\t")

@cli.command()
def relations():
    """
    Print agent,target,rtype triples for an ontology.
    """
    ontology = parse(sys.stdin, format="obo")
    ontology.relations.to_csv(sys.stdout, sep="\t", index=False)

def _print_descendants_or_ancestors(fn, term, identity):
    ontology = parse(sys.stdin)
    relations = set(ontology.relations.iloc[:,2])
    g = ontology.to_graph(relations=relations)
    terms = [term] if term is not None else g.nodes()

    root = sorted([n for n in g.nodes() if len(nx.descendants(g,n)) == 0],
            key=lambda n: -len(nx.ancestors(g,n)))[0]
    depths = nx.single_source_shortest_path_length(g.reverse(), root)
    for t1 in terms: 
        t2s = fn(g, t1)
        if identity:
            t2s.append(t1)
        for t2 in t2s:
            depth = depths.get(t2)
            if depth is not None:
                print(t1, t2, depth, sep="\t")

@cli.command()
@click.option("--term", "-t", required=False)
@click.option("--identity", "-i", required=False, is_flag=True,
    help="Include identity term pairs (a term and itself)")
def descendants(term=None, identity=False):
    """
    Print term, descendant, depth triples for an ontology,
    optionally restricting to a single term.
    """
    _print_descendants_or_ancestors(nx.ancestors, term, identity)

@cli.command()
@click.option("--term", "-t", required=False)
@click.option("--identity", "-i", required=False, is_flag=True,
    help="Include identity term pairs (a term and itself)")
def ancestors(term=None, identity=False):
    """
    Print term, ancestor, depth triples for an ontology,
    optionally restricting to a single term.
    """
    _print_descendants_or_ancestors(nx.descendants, term, identity)

if __name__ == "__main__":
    cli()
