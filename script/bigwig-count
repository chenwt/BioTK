#!/usr/bin/env python

import argparse
import multiprocessing as mp
import os
import subprocess
import sys
import tempfile

import pandas as pd

def count_locus(bigwig_file, chrom, start, end):
    cmd = ["bigWigSummary", bigwig_file, chrom, start, end]
    try:
        devnull = open(os.devnull, "w")
        mu = float(subprocess.check_output(cmd, stderr=devnull).strip().decode("utf-8"))
        cmd.append("-type=coverage") 
        coverage = float(subprocess.check_output(cmd, stderr=devnull).strip().decode("utf-8"))
        return mu * coverage
    except:
        return np.nan

def count(args):
    bed_file, bigwig_file = args
    cmd = ["bigWigAverageOverBed", bigwig_file, bed_file, "stdout"]
    data = {}
    devnull = open(os.devnull, "w")

    file = os.path.basename(bigwig_file)
    key = os.path.splitext(file)[0]

    try:
        output = subprocess.check_output(cmd, stderr=devnull).strip().decode("utf-8")
    except subprocess.CalledProcessError:
        return key, None

    for line in output.split("\n"):
        if not line:
            continue
        fields = line.split("\t")
        name = fields[0]
        mu = float(fields[4])
        data[name] = mu
    return key, pd.Series(data)

class BigWigFile(object):
    pass

class BigWigCollection(object):
    def __init__(self, paths):
        self._files = [BigWigFile(path) for path in paths]

    def mean(self):
        pass

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("bed_file", nargs=1)
    p.add_argument("bigwig_file", nargs="+")
    args = p.parse_args()

    region_file = args.bed_file[0]

    # FIXME: assumes unique
    columns = []
    with open(region_file) as h:
        for line in h:
            fields = line.strip().split("\t")
            columns.append(fields[3])
    columns = pd.Series(columns)

    rows = []
    index = []
    pool = mp.Pool(mp.cpu_count())
    args = ((region_file, bw_file) for bw_file in args.bigwig_file)
    
    for key, row in pool.imap(count, args):
        if row is not None:
            index.append(key)
            rows.append(row)

    df = pd.DataFrame(rows, index=index, columns=columns)
    df.to_csv(sys.stdout, sep="\t")
