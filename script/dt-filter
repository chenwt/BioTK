#!/usr/bin/env bash

# TODO: re-implement logic to do parallel
# (problem is interaction w/ header/no_header)

process() {
    awk -vmin=$1 -f <(cat <<"EOF"
BEGIN { IFS=FS="\t" }
{
    n=0
    for (i=2; i<=NF; i++) {
        if (!(($i == "") || ($i == "nan"))) {
            n+=1
        }
    }
    if (n >= min) {
        print
    }
}
EOF
)
}
export -f process

min_valid=1
while getopts phHm: opt; do
    case $opt in
        m) min_valid="$OPTARG" ;;
        p) parallel=y ;;
        H) no_header=y ;;
        h) usage=y ;;
    esac
done
shift $((OPTIND - 1))

[ ! -z "$usage" ] && {
    cat <<EOF
Output rows of a matrix which have a supplied number of non-empty values.
USAGE: dt filter [options]

    -H : input has no header
    -m : minimum valid (non-empty or NaN) items in a row 
         (default: 1)
EOF
    exit 0
} 1>&2

if [ ! -z "$no_header" ]; then
    process $min_valid 
else
    dt wrap parallel -k --pipe process $min_valid
fi
