#!/usr/bin/env python3

import argparse
import operator as op
import sys

import pandas as pd

p = argparse.ArgumentParser()
p.add_argument("--filter", "-f", action="append", default=[],
        help="An expression to filter by (e.g., 'age>10')")
p.add_argument("--annotation-file", "-F", 
        help="Read columns to filter by from this file, instead of stdin",
        type=argparse.FileType("r"))
p.add_argument("--min-valid", "-n", type=int, default=0,
        help="Remove rows with less than this many non-null values") 
p.add_argument("--batch-size", "-s", type=int, default=10,
        help="Process this many records at a time")
p.add_argument("--no-header", "-H", action="store_true")
args = p.parse_args()

operators = {
    ">": op.gt, "<": op.lt, "==": op.eq, "<=": op.le, ">=": op.ge
}

# Filters
filters = []
for text in args.filter:
    for op,fn in sorted(operators.items(), key=lambda _: -len(_[0])):
        if op in text:
            key,value = text.split(op)
            try:
                value = float(value.strip())
            except ValueError:
                value = value.strip()
            filters.append((key.strip(), fn, value))
            break
    else:
        raise ValueError("Filter not in format: Column[operator]Value. Valid operators: >,<,==,<=,>=")

def apply_filters(X):
    for k,fn,v in filters:
        ix = fn(X[k],v)
        X = X.ix[ix,:]
    return X.index

selection = None
if args.annotation_file:
    C = pd.read_table(args.annotation_file, index_col=0, sep="\t")
    selection = apply_filters(C)

kwargs = {"index_col": 0, "sep": "\t", "chunksize": args.batch_size}
#if args.no_header:
#    del kwargs["header"]
chunks = pd.read_table(sys.stdin, **kwargs)

for i,X in enumerate(chunks):
    sys.stdout.flush()
    nc = X.shape[1]

    if selection is not None:
        X = X.ix[X.index.isin(selection),:]
    elif filters:
        X = apply_filters(X)

    if args.min_valid > 0:
        # off by one?
        X = X.dropna(axis=0, thresh=(nc-args.min_valid))

    if i == 0:
        print("", *X.columns, sep="\t")
    if X.shape[0] > 0:
        for ii in range(X.shape[0]):
            print(X.index[ii], *X.iloc[ii,:], sep="\t")
            sys.stdout.flush()
