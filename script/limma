#!/usr/bin/env python3

import argparse
import sys

import pandas as pd
import numpy as np

from BioTK.r import limma, edger, ExpressionType

p = argparse.ArgumentParser()
p.add_argument("--formula", "-f")
p.add_argument("--standardize", "-s", action="store_true")
p.add_argument("--output-file", "-o",
        default="/dev/stdout")
p.add_argument("--coefficient", "-c",
        help="Output results (and p-values) for a single coefficient")
p.add_argument("--weighted", "-w",
        action="store_true",
        help="Use array quality weights for lmFit")
p.add_argument("--method", "-m",
        help="The method to use: limma for arrays, edgeR for RNA-seq",
        choices=["limma", "edger"],
        default="limma")
p.add_argument("--limit", "-l", action="append")
p.add_argument("design", type=argparse.FileType("r"))
args = p.parse_args()

X = pd.read_table(sys.stdin, index_col=0, sep="\t")
D = pd.read_table(args.design, index_col=0, sep="\t")
def align(X,D):
    X,D = X.align(D.T, axis=1)
    D = D.T
    return X,D
X,D = align(X,D)

formula = args.formula

coef = [args.coefficient] if args.coefficient else None

if args.limit is not None:
    for limit in args.limit:
        key,value = limit.split("=")
        assert key in D.columns
        ix = D[key] == int(value)
        D = D.ix[ix,:]
        X = X.ix[:,ix]
        X,D = align(X,D)

kwargs = {
    "formula": formula, 
    "coefficients": coef
}

if args.method == "limma":
    o = limma(X,D, weighted=args.weighted, **kwargs)
elif args.method == "edger":
    o = edger(X,D, **kwargs)

o.to_csv(args.output_file, 
        sep="\t", 
        na_rep="nan",
        float_format="%0.3f")
