#!/usr/bin/env python3

import itertools
import sys

import click
import numpy as np
import pandas as pd
from sklearn.feature_selection import SelectKBest

@click.group()
def cli():
    pass

@cli.command("impute")
@click.option("--sample-size", "-s", type=int, default=200)
@click.option("-k", type=int, default=2)
def impute(sample_size, k):
    """
    Lazy kNN imputation of missing values.

    When no neighbors are known, uses row mean instead.
    Removes rows with no data.
    """
    it = iter(pd.read_table(sys.stdin, sep="\t", 
            index_col=0, chunksize=sample_size))
    X = next(it)
    nn = [None] * X.shape[1]
    empty = list(range(X.shape[1]))

    def nearest(X,j):
        cors = X.corrwith(X.iloc[:,j]).dropna()
        cors.sort(ascending=False)
        neighbors = list(cors.index[:(k+100)])
        if len(neighbors) == 0:
            return None
        return neighbors

    def update_nearest():
        for j in empty:
            nn[j] = nearest(X,j)
            if nn[j] is not None:
                empty.remove(j)

    it = itertools.chain([X], it)

    print(X.index.name or "", *X.columns, sep="\t")
    for X in it:
        update_nearest()
        for i in range(X.shape[0]):
            x = X.iloc[i,:]
            mu = x.mean()
            ix = np.isnan(x)
            if (~ix).sum() == 0:
                continue
            if ix.sum() > 0:
                values = []
                for j in ix.nonzero()[0]:
                    if j in empty:
                        values.append(mu)
                    else:
                        values.append(x.loc[nn[j]].dropna()[:k].mean())
                x.iloc[ix.nonzero()] = values
            print(x.name, *x, sep="\t")

@cli.command("fselect")
@click.option("--features", "-f", type=int, default=100)
@click.option("--sample", "-n", type=int, default=500)
@click.argument("file", type=click.File("r"),
        required=False, default=sys.stdin)
def select_features(file, features, sample):
    """
    Select/output the best features in a matrix
    """
    handle = file
    data = pd.read_table(handle, sep="\t", 
            index_col=0, nrows=sample)
    print(data.iloc[:5,:5])

if __name__ == "__main__":
    cli()
